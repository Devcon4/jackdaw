using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Jackdaw.SourceGenerator;


[Generator]
public class JackdawGenerator : IIncrementalGenerator
{
  public void Initialize(IncrementalGeneratorInitializationContext context)
  {
    var handlerClasses = context.SyntaxProvider
        .CreateSyntaxProvider(
            predicate: static (s, _) => s is ClassDeclarationSyntax c && c.BaseList != null,
            transform: static (ctx, _) => GetHandlerInfo(ctx))
        .Where(static m => m is not null);

    context.RegisterSourceOutput(handlerClasses.Collect(), GenerateDispatcher);
  }

  private static HandlerInfo? GetHandlerInfo(GeneratorSyntaxContext context)
  {
    var classDeclaration = (ClassDeclarationSyntax)context.Node;
    var symbol = context.SemanticModel.GetDeclaredSymbol(classDeclaration);

    if (symbol is not INamedTypeSymbol classSymbol)
      return null;

    var handlerInterface = classSymbol.AllInterfaces
        .FirstOrDefault(i =>
            i.IsGenericType &&
            i.ConstructedFrom.ToDisplayString() == "Jackdaw.Interfaces.IRequestHandler<TRequest, TResponse>");

    if (handlerInterface is null)
      return null;

    var requestType = handlerInterface.TypeArguments[0];
    var responseType = handlerInterface.TypeArguments[1];

    return new HandlerInfo(
        classSymbol.ToDisplayString(),
        requestType.ToDisplayString(),
        responseType.ToDisplayString());
  }

  private void GenerateDispatcher(SourceProductionContext context, ImmutableArray<HandlerInfo?> handlers)
  {
    var validHandlers = handlers.Where(h => h is not null).Cast<HandlerInfo>().ToList();

    var sb = new StringBuilder();
    sb.AppendLine("// <auto-generated/>");
    sb.AppendLine($"// Found {validHandlers.Count} handler(s)");
    foreach (var h in validHandlers)
    {
      sb.AppendLine($"// Handler: {h.HandlerType} -> {h.RequestType} -> {h.ResponseType}");
    }
    sb.AppendLine();
    sb.AppendLine("using System;");
    sb.AppendLine("using System.Threading;");
    sb.AppendLine("using System.Threading.Tasks;");
    sb.AppendLine("using Microsoft.Extensions.DependencyInjection;");
    sb.AppendLine("using Jackdaw.Interfaces;");
    sb.AppendLine();
    sb.AppendLine("namespace Jackdaw.Core;");
    sb.AppendLine();
    sb.AppendLine("file sealed class GeneratedHandlerDispatcher : IHandlerDispatcher");
    sb.AppendLine("{");
    sb.AppendLine("    public async Task DispatchAsync(IRequestMetadata metadata, IServiceProvider serviceProvider, CancellationToken cancellationToken)");
    sb.AppendLine("    {");

    if (validHandlers.Count == 0)
    {
      sb.AppendLine("        throw new InvalidOperationException(\"No handlers have been registered. Use AddHandler<THandler, TRequest, TResponse>() to register handlers.\");");
    }
    else
    {
      sb.AppendLine("        switch (metadata)");
      sb.AppendLine("        {");

      foreach (var handler in validHandlers)
      {
        var hash = $"m{System.Math.Abs(handler.ResponseType.GetHashCode())}";
        sb.AppendLine($"            case RequestMetadata<{handler.ResponseType}> {hash}:");
        sb.AppendLine($"            {{");
        sb.AppendLine($"                var handler = serviceProvider.GetRequiredService<IRequestHandler<{handler.RequestType}, {handler.ResponseType}>>();");
        sb.AppendLine($"                try");
        sb.AppendLine($"                {{");
        sb.AppendLine($"                    var response = await handler.Handle(({handler.RequestType}){hash}.Request, cancellationToken);");
        sb.AppendLine($"                    {hash}.CompletionSource.SetResult(response);");
        sb.AppendLine($"                }}");
        sb.AppendLine($"                catch (Exception ex)");
        sb.AppendLine($"                {{");
        sb.AppendLine($"                    {hash}.CompletionSource.SetException(ex);");
        sb.AppendLine($"                }}");
        sb.AppendLine($"                break;");
        sb.AppendLine($"            }}");
      }

      sb.AppendLine("            default:");
      sb.AppendLine("                throw new InvalidOperationException($\"No handler registered for {metadata.GetType().Name}\");");
      sb.AppendLine("        }");
    }

    sb.AppendLine("    }");
    sb.AppendLine("}");
    sb.AppendLine();
    sb.AppendLine("public static partial class ServiceCollectionExtensions");
    sb.AppendLine("{");
    sb.AppendLine("    public static IServiceCollection AddJackdaw(this IServiceCollection services, Action<JackdawBuilder> configure)");
    sb.AppendLine("    {");
    sb.AppendLine("        var builder = new JackdawBuilder(services);");
    sb.AppendLine("        configure(builder);");
    sb.AppendLine("        if (!builder.Results.HasQueue)");
    sb.AppendLine("        {");
    sb.AppendLine("            throw new InvalidOperationException(\"A message queue must be configured. Call UseInMemoryQueue or another queue configuration method.\");");
    sb.AppendLine("        }");
    sb.AppendLine();
    sb.AppendLine("        services.AddSingleton<IHandlerDispatcher, GeneratedHandlerDispatcher>();");
    sb.AppendLine("        services.AddSingleton<IMediator, Mediator>();");
    sb.AppendLine("        services.AddHostedService<MediatorRunner>();");
    sb.AppendLine("        return services;");
    sb.AppendLine("    }");
    sb.AppendLine("}");

    context.AddSource("HandlerDispatcher.g.cs", sb.ToString());
  }

  private record HandlerInfo(string HandlerType, string RequestType, string ResponseType);
}