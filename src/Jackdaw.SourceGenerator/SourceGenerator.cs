using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Jackdaw.SourceGenerator;

[Generator]
public class JackdawGenerator : IIncrementalGenerator
{
  public void Initialize(IncrementalGeneratorInitializationContext context)
  {
    var handlerClasses = context.SyntaxProvider
        .CreateSyntaxProvider(
            predicate: static (s, _) => s is ClassDeclarationSyntax c && c.BaseList != null,
            transform: static (ctx, _) => GetHandlerInfo(ctx))
        .Where(static m => m is not null);

    context.RegisterSourceOutput(handlerClasses.Collect(), GenerateDispatcher);
  }
  // SourceGenerator.cs changes

  // Step 1: Update HandlerInfo to include queue name
  private static HandlerInfo? GetHandlerInfo(GeneratorSyntaxContext context)
  {
    var classDeclaration = (ClassDeclarationSyntax)context.Node;
    var symbol = context.SemanticModel.GetDeclaredSymbol(classDeclaration);

    if (symbol is not INamedTypeSymbol classSymbol)
      return null;

    var handlerInterface = classSymbol.AllInterfaces
        .FirstOrDefault(i =>
            i.IsGenericType &&
            i.ConstructedFrom.ToDisplayString() == "Jackdaw.Interfaces.IHandler<TRequest, TResponse>");

    if (handlerInterface is null)
      return null;

    var requestType = handlerInterface.TypeArguments[0];
    var responseType = handlerInterface.TypeArguments[1];

    // Look for [JackdawQueue("QueueName")] attribute
    var queueAttribute = classSymbol.GetAttributes()
        .FirstOrDefault(a => a.AttributeClass?.Name == "JackdawQueueAttribute");

    var queueName = queueAttribute?.ConstructorArguments.FirstOrDefault().Value?.ToString()
                    ?? "Default"; // Use "Default" if no attribute

    return new HandlerInfo(
        classSymbol.ToDisplayString(),
        requestType.ToDisplayString(),
        responseType.ToDisplayString(),
        queueName);
  }

  // Step 2: Update HandlerInfo record
  private record HandlerInfo(
      string HandlerType,
      string RequestType,
      string ResponseType,
      string QueueName);

  // Step 3: Generate code differently
  private void GenerateDispatcher(SourceProductionContext context, ImmutableArray<HandlerInfo?> handlers)
  {
    var validHandlers = handlers.Where(h => h is not null).Cast<HandlerInfo>().ToList();

    // Group handlers by queue
    var handlersByQueue = validHandlers.GroupBy(h => h.QueueName).ToList();

    var sb = new StringBuilder();
    sb.AppendLine("#nullable enable");
    sb.AppendLine("// <auto-generated/>");
    sb.AppendLine($"// Found {validHandlers.Count} handler(s) across {handlersByQueue.Count} queue(s)");
    foreach (var h in validHandlers)
    {
      sb.AppendLine($"// Handler: {h.HandlerType} -> Queue: {h.QueueName}");
    }
    sb.AppendLine();
    sb.AppendLine("using System;");
    sb.AppendLine("using System.Threading;");
    sb.AppendLine("using System.Threading.Tasks;");
    sb.AppendLine("using Microsoft.Extensions.DependencyInjection;");
    sb.AppendLine("using Microsoft.Extensions.Hosting;");
    sb.AppendLine("using Jackdaw.Interfaces;");
    sb.AppendLine();
    sb.AppendLine("namespace Jackdaw.Core;");
    sb.AppendLine();

    // Generate ONE dispatcher (handles all queues)
    GenerateUnifiedDispatcher(sb, validHandlers);

    // Generate router
    GenerateQueueRouter(sb, validHandlers);

    // Generate AddJackdaw extension
    GenerateServiceRegistration(sb, validHandlers, handlersByQueue);

    context.AddSource("HandlerDispatcher.g.cs", sb.ToString());
  }

  private void GenerateUnifiedDispatcher(StringBuilder sb, List<HandlerInfo> handlers)
  {
    sb.AppendLine("file sealed class GeneratedHandlerDispatcher : IHandlerDispatcher");
    sb.AppendLine("{");
    sb.AppendLine("    public async Task DispatchAsync(IRequestMetadata metadata, IServiceProvider serviceProvider, CancellationToken cancellationToken)");
    sb.AppendLine("    {");

    if (handlers.Count == 0)
    {
      sb.AppendLine("        throw new InvalidOperationException(\"No handlers registered.\");");
    }
    else
    {
      sb.AppendLine("        switch (metadata)");
      sb.AppendLine("        {");

      foreach (var handler in handlers)
      {
        var hash = $"m{System.Math.Abs(handler.ResponseType.GetHashCode())}";
        sb.AppendLine($"            case RequestMetadata<{handler.ResponseType}> {hash}:");
        sb.AppendLine($"            {{");
        sb.AppendLine($"                var handler = serviceProvider.GetRequiredService<IHandler<{handler.RequestType}, {handler.ResponseType}>>();");
        sb.AppendLine($"                try");
        sb.AppendLine($"                {{");
        sb.AppendLine($"                    var response = await handler.Handle(({handler.RequestType}){hash}.Request, cancellationToken);");
        sb.AppendLine($"                    {hash}.CompletionSource.SetResult(response);");
        sb.AppendLine($"                }}");
        sb.AppendLine($"                catch (Exception ex)");
        sb.AppendLine($"                {{");
        sb.AppendLine($"                    {hash}.CompletionSource.SetException(ex);");
        sb.AppendLine($"                }}");
        sb.AppendLine($"                break;");
        sb.AppendLine($"            }}");
      }

      sb.AppendLine("            default:");
      sb.AppendLine("                throw new InvalidOperationException($\"No handler registered for {metadata.GetType().Name}\");");
      sb.AppendLine("        }");
    }

    sb.AppendLine("    }");
    sb.AppendLine("}");
    sb.AppendLine();
  }
  private void GenerateQueueRouter(StringBuilder sb, List<HandlerInfo> handlers)
  {
    sb.AppendLine("file sealed class GeneratedQueueRouter : IQueueRouter");
    sb.AppendLine("{");
    sb.AppendLine("    private readonly IServiceProvider _serviceProvider;");
    sb.AppendLine();
    sb.AppendLine("    public GeneratedQueueRouter(IServiceProvider serviceProvider)");
    sb.AppendLine("    {");
    sb.AppendLine("        _serviceProvider = serviceProvider;");
    sb.AppendLine("    }");
    sb.AppendLine();
    sb.AppendLine("    public IMessageQueue GetQueue<TRequest, TResponse>(TRequest request) where TResponse : IResponse where TRequest : IRequest<TResponse>");
    sb.AppendLine("    {");

    if (handlers.Count == 0)
    {
      sb.AppendLine("        throw new InvalidOperationException(\"No handlers registered.\");");
    }
    else
    {
      // Group handlers by request type to get queue mapping
      var requestToQueue = handlers
          .GroupBy(h => h.RequestType)
          .ToDictionary(g => g.Key, g => g.First().QueueName);

      sb.AppendLine("        var requestType = request.GetType();");
      sb.AppendLine("        return requestType.FullName switch");
      sb.AppendLine("        {");

      foreach (var kvp in requestToQueue)
      {
        sb.AppendLine($"            \"{kvp.Key}\" => _serviceProvider.GetRequiredKeyedService<IMessageQueue>(\"{kvp.Value}\"),");
      }

      sb.AppendLine("            _ => throw new InvalidOperationException(");
      sb.AppendLine("                $\"No queue mapping found for request type {requestType.Name}. \" +");
      sb.AppendLine("                $\"Ensure the handler for this request is decorated with [JackdawQueue] attribute or register a default queue.\")");
      sb.AppendLine("        };");
    }

    sb.AppendLine("    }");
    sb.AppendLine("}");
    sb.AppendLine();
  }
  private void GenerateServiceRegistration(
      StringBuilder sb,
      List<HandlerInfo> handlers,
      List<IGrouping<string, HandlerInfo>> handlersByQueue)
  {
    sb.AppendLine("public static partial class ServiceCollectionExtensions");
    sb.AppendLine("{");
    sb.AppendLine("    public static IServiceCollection AddJackdaw(this IServiceCollection services, Action<JackdawBuilder>? configure = null)");
    sb.AppendLine("    {");
    sb.AppendLine("        var builder = new JackdawBuilder(services);");
    sb.AppendLine("        configure?.Invoke(builder);");
    sb.AppendLine("        var isValid = builder.Valid();");
    sb.AppendLine("        if (!isValid)");
    sb.AppendLine("        {");
    sb.AppendLine("            throw new InvalidOperationException(\"Invalid Jackdaw configuration.\");");
    sb.AppendLine("        }");
    sb.AppendLine();
    // Register all handlers
    foreach (var handler in handlers)
    {
      sb.AppendLine($"        services.AddScoped<IHandler<{handler.RequestType}, {handler.ResponseType}>, {handler.HandlerType}>();");
    }

    // Register dispatcher (shared)
    sb.AppendLine("        services.AddSingleton<IHandlerDispatcher, GeneratedHandlerDispatcher>();");

    // Register router
    sb.AppendLine("        services.AddSingleton<IQueueRouter, GeneratedQueueRouter>();");

    // Register mediator
    sb.AppendLine("        services.AddSingleton<IMediator, Mediator>();");

    // Register one MediatorRunner per queue
    foreach (var queueGroup in handlersByQueue)
    {
      var queueName = queueGroup.Key;
      sb.AppendLine($"        // MediatorRunner for '{queueName}' queue");
      sb.AppendLine($"        services.AddSingleton<IHostedService>(sp => ");
      sb.AppendLine($"            new MediatorRunner(");
      sb.AppendLine($"                \"{queueName}\",");
      sb.AppendLine($"                sp,");
      sb.AppendLine($"                sp.GetRequiredService<IHandlerDispatcher>()));");
    }

    sb.AppendLine("        return services;");
    sb.AppendLine("    }");
    sb.AppendLine("}");
  }
}