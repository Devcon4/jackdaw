name: Build and Publish NuGet

on:
  release:
    types: [published]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write  # Required for NuGet trusted publishing

env:
  DOTNET_VERSION: '9.0.x'
  CORE_PROJECT_PATH: 'src/Jackdaw.Core/Jackdaw.Core.csproj'
  INTERFACES_PROJECT_PATH: 'src/Jackdaw.Interfaces/Jackdaw.Interfaces.csproj'
  INMEMORY_PROJECT_PATH: 'src/Jackdaw.Queues.InMemory/Jackdaw.Queues.InMemory.csproj'
  GENERATOR_PATH: 'src/Jackdaw.SourceGenerator/Jackdaw.SourceGenerator.csproj'
  PACKAGE_OUTPUT_DIR: ${{ github.workspace }}/nupkgs

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore and Build all projects
      run: |
        dotnet restore ${{ env.GENERATOR_PATH }}
        dotnet restore ${{ env.INTERFACES_PROJECT_PATH }}
        dotnet restore ${{ env.INMEMORY_PROJECT_PATH }}
        dotnet restore ${{ env.CORE_PROJECT_PATH }}
        
        dotnet build ${{ env.GENERATOR_PATH }} -c Release --no-restore
        dotnet build ${{ env.INTERFACES_PROJECT_PATH }} -c Release --no-restore
        dotnet build ${{ env.INMEMORY_PROJECT_PATH }} -c Release --no-restore
        dotnet build ${{ env.CORE_PROJECT_PATH }} -c Release --no-restore

    - name: Set version from release tag
      if: github.event_name == 'release'
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV

    - name: Pack all NuGet packages
      run: |
        dotnet pack ${{ env.GENERATOR_PATH }} -c Release --no-build --output ${{ env.PACKAGE_OUTPUT_DIR }} /p:PackageVersion=$PACKAGE_VERSION
        dotnet pack ${{ env.INTERFACES_PROJECT_PATH }} -c Release --no-build --output ${{ env.PACKAGE_OUTPUT_DIR }} /p:PackageVersion=$PACKAGE_VERSION
        dotnet pack ${{ env.INMEMORY_PROJECT_PATH }} -c Release --no-build --output ${{ env.PACKAGE_OUTPUT_DIR }} /p:PackageVersion=$PACKAGE_VERSION
        dotnet pack ${{ env.CORE_PROJECT_PATH }} -c Release --no-build --output ${{ env.PACKAGE_OUTPUT_DIR }} /p:PackageVersion=$PACKAGE_VERSION

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package
        path: ${{ env.PACKAGE_OUTPUT_DIR }}/*.nupkg

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: nuget-package
        path: ${{ env.PACKAGE_OUTPUT_DIR }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: NuGet login (OIDC)
      uses: NuGet/login@v1
      id: nuget-login
      with:
        user: Devcon

    - name: Publish to NuGet.org
      run: |
        dotnet nuget push "${{ env.PACKAGE_OUTPUT_DIR }}/*.nupkg" \
          --api-key ${{ steps.nuget-login.outputs.NUGET_API_KEY }} \
          --source "https://api.nuget.org/v3/index.json" \
          --skip-duplicate